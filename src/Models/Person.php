<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API de Originação | Origination API
 *
 * Documentação da API do serviço de originação de contas.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @description Full entity that represents a person.&lt;br&gt;Entidade completa que representa uma pessoa.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Person implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'atar_id' => 'int',
'name' => 'string',
'document' => 'string',
'document_type' => 'string',
'email' => 'string',
'addresses' => '\Swagger\Client\Model\PersonAddresses[]',
'birth_date' => 'int',
'mothers_name' => 'string',
'phone' => 'string',
'gender' => 'string',
'citizenship' => 'string',
'ppe' => 'bool',
'fiscal_country' => 'string',
'cbo_id' => 'string',
'rg_number' => 'string',
'monthly_income' => 'int',
'patrimony' => 'int',
'creation_date' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'atar_id' => null,
'name' => null,
'document' => null,
'document_type' => null,
'email' => null,
'addresses' => null,
'birth_date' => null,
'mothers_name' => null,
'phone' => null,
'gender' => null,
'citizenship' => null,
'ppe' => null,
'fiscal_country' => null,
'cbo_id' => null,
'rg_number' => null,
'monthly_income' => null,
'patrimony' => null,
'creation_date' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'atar_id' => 'atarId',
'name' => 'name',
'document' => 'document',
'document_type' => 'documentType',
'email' => 'email',
'addresses' => 'addresses',
'birth_date' => 'birthDate',
'mothers_name' => 'mothersName',
'phone' => 'phone',
'gender' => 'gender',
'citizenship' => 'citizenship',
'ppe' => 'ppe',
'fiscal_country' => 'fiscalCountry',
'cbo_id' => 'cboId',
'rg_number' => 'rgNumber',
'monthly_income' => 'monthlyIncome',
'patrimony' => 'patrimony',
'creation_date' => 'creationDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'atar_id' => 'setAtarId',
'name' => 'setName',
'document' => 'setDocument',
'document_type' => 'setDocumentType',
'email' => 'setEmail',
'addresses' => 'setAddresses',
'birth_date' => 'setBirthDate',
'mothers_name' => 'setMothersName',
'phone' => 'setPhone',
'gender' => 'setGender',
'citizenship' => 'setCitizenship',
'ppe' => 'setPpe',
'fiscal_country' => 'setFiscalCountry',
'cbo_id' => 'setCboId',
'rg_number' => 'setRgNumber',
'monthly_income' => 'setMonthlyIncome',
'patrimony' => 'setPatrimony',
'creation_date' => 'setCreationDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'atar_id' => 'getAtarId',
'name' => 'getName',
'document' => 'getDocument',
'document_type' => 'getDocumentType',
'email' => 'getEmail',
'addresses' => 'getAddresses',
'birth_date' => 'getBirthDate',
'mothers_name' => 'getMothersName',
'phone' => 'getPhone',
'gender' => 'getGender',
'citizenship' => 'getCitizenship',
'ppe' => 'getPpe',
'fiscal_country' => 'getFiscalCountry',
'cbo_id' => 'getCboId',
'rg_number' => 'getRgNumber',
'monthly_income' => 'getMonthlyIncome',
'patrimony' => 'getPatrimony',
'creation_date' => 'getCreationDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_CPF = 'cpf';
const GENDER_M = 'M';
const GENDER_F = 'F';
const CITIZENSHIP_BRA = 'BRA';
const CITIZENSHIP_EST = 'EST';
const FISCAL_COUNTRY_BRA = 'BRA';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_CPF,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_M,
self::GENDER_F,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCitizenshipAllowableValues()
    {
        return [
            self::CITIZENSHIP_BRA,
self::CITIZENSHIP_EST,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFiscalCountryAllowableValues()
    {
        return [
            self::FISCAL_COUNTRY_BRA,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['atar_id'] = isset($data['atar_id']) ? $data['atar_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['mothers_name'] = isset($data['mothers_name']) ? $data['mothers_name'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['citizenship'] = isset($data['citizenship']) ? $data['citizenship'] : null;
        $this->container['ppe'] = isset($data['ppe']) ? $data['ppe'] : null;
        $this->container['fiscal_country'] = isset($data['fiscal_country']) ? $data['fiscal_country'] : null;
        $this->container['cbo_id'] = isset($data['cbo_id']) ? $data['cbo_id'] : null;
        $this->container['rg_number'] = isset($data['rg_number']) ? $data['rg_number'] : null;
        $this->container['monthly_income'] = isset($data['monthly_income']) ? $data['monthly_income'] : null;
        $this->container['patrimony'] = isset($data['patrimony']) ? $data['patrimony'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['document'] === null) {
            $invalidProperties[] = "'document' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($this->container['document_type']) && !in_array($this->container['document_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['birth_date'] === null) {
            $invalidProperties[] = "'birth_date' can't be null";
        }
        if ($this->container['mothers_name'] === null) {
            $invalidProperties[] = "'mothers_name' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['citizenship'] === null) {
            $invalidProperties[] = "'citizenship' can't be null";
        }
        $allowedValues = $this->getCitizenshipAllowableValues();
        if (!is_null($this->container['citizenship']) && !in_array($this->container['citizenship'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'citizenship', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['ppe'] === null) {
            $invalidProperties[] = "'ppe' can't be null";
        }
        $allowedValues = $this->getFiscalCountryAllowableValues();
        if (!is_null($this->container['fiscal_country']) && !in_array($this->container['fiscal_country'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fiscal_country', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets atar_id
     *
     * @return int
     */
    public function getAtarId()
    {
        return $this->container['atar_id'];
    }

    /**
     * Sets atar_id
     *
     * @param int $atar_id Unique identification to a person or a company known by Atar.<br>Identificação única de uma pessoa ou empresa conhecida pela Atar.
     *
     * @return $this
     */
    public function setAtarId($atar_id)
    {
        $this->container['atar_id'] = $atar_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Entity name.<br>Nome da entidade.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document Entity CPF.<br>CPF da entidade.
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($document_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Personal email.<br>Email pessoal.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\PersonAddresses[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\PersonAddresses[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return int
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param int $birth_date Date of birth in Unix timestamp.<br>Data de nascimento em timestamp Unix.
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets mothers_name
     *
     * @return string
     */
    public function getMothersName()
    {
        return $this->container['mothers_name'];
    }

    /**
     * Sets mothers_name
     *
     * @param string $mothers_name Mother's full name.<br>Nome completo da mãe.
     *
     * @return $this
     */
    public function setMothersName($mothers_name)
    {
        $this->container['mothers_name'] = $mothers_name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Person phone number.<br>Telefone da pessoa (DDI + DDD + NUMERO).
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Person gender.<br>Gênero da pessoa.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($gender) && !in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets citizenship
     *
     * @return string
     */
    public function getCitizenship()
    {
        return $this->container['citizenship'];
    }

    /**
     * Sets citizenship
     *
     * @param string $citizenship Nationality abbreviation.<br>Sigla da nacionalidade.
     *
     * @return $this
     */
    public function setCitizenship($citizenship)
    {
        $allowedValues = $this->getCitizenshipAllowableValues();
        if (!in_array($citizenship, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'citizenship', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['citizenship'] = $citizenship;

        return $this;
    }

    /**
     * Gets ppe
     *
     * @return bool
     */
    public function getPpe()
    {
        return $this->container['ppe'];
    }

    /**
     * Sets ppe
     *
     * @param bool $ppe Indicates if the person is politically exposed.<br>Indica se a pessoa é politicamente exposta.
     *
     * @return $this
     */
    public function setPpe($ppe)
    {
        $this->container['ppe'] = $ppe;

        return $this;
    }

    /**
     * Gets fiscal_country
     *
     * @return string
     */
    public function getFiscalCountry()
    {
        return $this->container['fiscal_country'];
    }

    /**
     * Sets fiscal_country
     *
     * @param string $fiscal_country Fiscal country.<br>País fiscal.
     *
     * @return $this
     */
    public function setFiscalCountry($fiscal_country)
    {
        $allowedValues = $this->getFiscalCountryAllowableValues();
        if (!is_null($fiscal_country) && !in_array($fiscal_country, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fiscal_country', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fiscal_country'] = $fiscal_country;

        return $this;
    }

    /**
     * Gets cbo_id
     *
     * @return string
     */
    public function getCboId()
    {
        return $this->container['cbo_id'];
    }

    /**
     * Sets cbo_id
     *
     * @param string $cbo_id Brazilian classification of occupations.<br>Classificação brasileira de ocupações (Consulta o id no endpoint /entities/cbos).
     *
     * @return $this
     */
    public function setCboId($cbo_id)
    {
        $this->container['cbo_id'] = $cbo_id;

        return $this;
    }

    /**
     * Gets rg_number
     *
     * @return string
     */
    public function getRgNumber()
    {
        return $this->container['rg_number'];
    }

    /**
     * Sets rg_number
     *
     * @param string $rg_number Registration number.<br>Registro geral.
     *
     * @return $this
     */
    public function setRgNumber($rg_number)
    {
        $this->container['rg_number'] = $rg_number;

        return $this;
    }

    /**
     * Gets monthly_income
     *
     * @return int
     */
    public function getMonthlyIncome()
    {
        return $this->container['monthly_income'];
    }

    /**
     * Sets monthly_income
     *
     * @param int $monthly_income Monthly income, in cents.<br>Renda mensal, em centavos.
     *
     * @return $this
     */
    public function setMonthlyIncome($monthly_income)
    {
        $this->container['monthly_income'] = $monthly_income;

        return $this;
    }

    /**
     * Gets patrimony
     *
     * @return int
     */
    public function getPatrimony()
    {
        return $this->container['patrimony'];
    }

    /**
     * Sets patrimony
     *
     * @param int $patrimony Patrimony of the person, in cents.<br>Patrimônio da pessoa, em centavos.
     *
     * @return $this
     */
    public function setPatrimony($patrimony)
    {
        $this->container['patrimony'] = $patrimony;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return int
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param int $creation_date Creation date timestamp.<br>Timestamp da data de criação.
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
